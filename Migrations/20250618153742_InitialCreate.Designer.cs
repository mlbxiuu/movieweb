// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieWebsite.Data;

#nullable disable

namespace MovieWebsite.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250618153742_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("MovieWebsite.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("MovieWebsite.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Dislikes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Phim này thực sự làm mình khóc rất nhiều!",
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9987),
                            Dislikes = 2,
                            Likes = 50,
                            MovieId = 1,
                            UserEmail = "nguyenvana@example.com",
                            UserName = "NguyenVanA"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Cảm ơn Trấn Thành đã mang đến một bộ phim ý nghĩa!",
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9990),
                            Dislikes = 1,
                            Likes = 30,
                            MovieId = 1,
                            ParentCommentId = 1,
                            UserEmail = "tranthib@example.com",
                            UserName = "TranThiB"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Tập 1 rất hấp dẫn, chemistry giữa hai diễn viên chính đỉnh cao!",
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9992),
                            Dislikes = 0,
                            EpisodeId = 1,
                            Likes = 40,
                            MovieId = 2,
                            UserEmail = "levanc@example.com",
                            UserName = "LeVanC"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Tập 2 càng cuốn, không thể rời mắt!",
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9994),
                            Dislikes = 1,
                            EpisodeId = 2,
                            Likes = 35,
                            MovieId = 2,
                            UserEmail = "phamthid@example.com",
                            UserName = "PhamThiD"
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FlagPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "VN",
                            Name = "Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            Code = "KR",
                            Name = "Hàn Quốc"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CN",
                            Name = "Trung Quốc"
                        },
                        new
                        {
                            Id = 4,
                            Code = "JP",
                            Name = "Nhật Bản"
                        },
                        new
                        {
                            Id = 5,
                            Code = "US",
                            Name = "Mỹ"
                        },
                        new
                        {
                            Id = 6,
                            Code = "TH",
                            Name = "Thái Lan"
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MovieId", "EpisodeNumber")
                        .IsUnique();

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9935),
                            Description = "Yoon Se-ri vô tình hạ cánh xuống Bắc Triều Tiên sau một tai nạn.",
                            Duration = 70,
                            EpisodeNumber = 1,
                            MovieId = 2,
                            ReleaseDate = new DateTime(2019, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 1: Cuộc gặp gỡ định mệnh",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9936),
                            VideoPath = "/videos/1.mp4",
                            Views = 10000
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9938),
                            Description = "Ri Jeong-hyeok giúp Se-ri tìm cách trở về Hàn Quốc.",
                            Duration = 65,
                            EpisodeNumber = 2,
                            MovieId = 2,
                            ReleaseDate = new DateTime(2019, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 2: Kế hoạch trốn thoát",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9939),
                            VideoPath = "/videos/1.mp4",
                            Views = 9500
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9941),
                            Description = "Se-ri dần thích nghi với cuộc sống ở Bắc Triều Tiên.",
                            Duration = 68,
                            EpisodeNumber = 3,
                            MovieId = 2,
                            ReleaseDate = new DateTime(2019, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 3: Bí mật bị hé lộ",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9941),
                            VideoPath = "/videos/1.mp4",
                            Views = 9000
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9943),
                            Description = "Tình cảm giữa Se-ri và Jeong-hyeok bắt đầu phát triển.",
                            Duration = 72,
                            EpisodeNumber = 4,
                            MovieId = 2,
                            ReleaseDate = new DateTime(2019, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 4: Tình cảm nảy nở",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9944),
                            VideoPath = "/videos/1.mp4",
                            Views = 8800
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9946),
                            Description = "Se-ri đối mặt với những nguy hiểm mới ở Bắc Triều Tiên.",
                            Duration = 70,
                            EpisodeNumber = 5,
                            MovieId = 2,
                            ReleaseDate = new DateTime(2019, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 5: Thách thức mới",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9946),
                            VideoPath = "/videos/1.mp4",
                            Views = 8500
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9948),
                            Description = "Jeong-hyeok lên kế hoạch bảo vệ Se-ri.",
                            Duration = 67,
                            EpisodeNumber = 6,
                            MovieId = 2,
                            ReleaseDate = new DateTime(2019, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 6: Hành trình nguy hiểm",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9949),
                            VideoPath = "/videos/1.mp4",
                            Views = 8200
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FF5722",
                            Name = "Hành Động"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#E91E63",
                            Name = "Tình Cảm"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FFC107",
                            Name = "Hài Hước"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#424242",
                            Name = "Kinh Dị"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#2196F3",
                            Name = "Khoa Học Viễn Tưởng"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#4CAF50",
                            Name = "Phiêu Lưu"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#9C27B0",
                            Name = "Chính Kịch"
                        },
                        new
                        {
                            Id = 8,
                            Color = "#FF9800",
                            Name = "Hoạt Hình"
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<string>("Cast")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalEpisodes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ReleaseYear");

                    b.HasIndex("Title");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 8.5,
                            Cast = "Trấn Thành, Tuấn Trần, Ngô Kiến Huy",
                            CountryId = 1,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9890),
                            Description = "Bộ phim kể về cuộc sống của một gia đình lao động nghèo ở Sài Gòn.",
                            Director = "Trấn Thành",
                            EnglishTitle = "Old Father",
                            GenreId = 7,
                            IsCompleted = true,
                            PosterPath = "/images/1.png",
                            RatingCount = 1200,
                            ReleaseYear = 2021,
                            Title = "Bố Già",
                            TotalEpisodes = 1,
                            TrailerPath = "/videos/1.mp4",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9890),
                            Views = 150000
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 9.0,
                            Cast = "Hyun Bin, Son Ye-jin",
                            CountryId = 2,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9895),
                            Description = "Câu chuyện tình yêu giữa một nữ thừa kế Hàn Quốc và một sĩ quan Bắc Triều Tiên.",
                            Director = "Lee Jeong-hyo",
                            EnglishTitle = "Crash Landing on You",
                            GenreId = 2,
                            IsCompleted = true,
                            PosterPath = "/images/2.png",
                            RatingCount = 2000,
                            ReleaseYear = 2019,
                            Title = "Hạ Cánh Nơi Anh",
                            TotalEpisodes = 16,
                            TrailerPath = "/videos/2.mp4",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9895),
                            Views = 250000
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 9.1999999999999993,
                            Cast = "Song Kang-ho, Lee Sun-kyun, Cho Yeo-jeong",
                            CountryId = 2,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9898),
                            Description = "Một gia đình nghèo tìm cách thâm nhập vào cuộc sống của một gia đình giàu có.",
                            Director = "Bong Joon-ho",
                            EnglishTitle = "Parasite",
                            GenreId = 7,
                            IsCompleted = true,
                            PosterPath = "/images/3.png",
                            RatingCount = 2500,
                            ReleaseYear = 2019,
                            Title = "Ký Sinh Trùng",
                            TotalEpisodes = 1,
                            TrailerPath = "/videos/3.mp4",
                            UpdatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9899),
                            Views = 300000
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 1,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 4
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9966),
                            MovieId = 1,
                            Review = "Phim rất cảm động, diễn xuất của Trấn Thành tuyệt vời!",
                            Score = 8,
                            UserEmail = "nguyenvana@example.com",
                            UserName = "NguyenVanA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9968),
                            MovieId = 1,
                            Review = "Cốt truyện gần gũi, phản ánh đúng cuộc sống.",
                            Score = 9,
                            UserEmail = "tranthib@example.com",
                            UserName = "TranThiB"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 18, 22, 37, 41, 334, DateTimeKind.Local).AddTicks(9969),
                            MovieId = 3,
                            Review = "Một kiệt tác của điện ảnh Hàn Quốc!",
                            Score = 10,
                            UserEmail = "levanc@example.com",
                            UserName = "LeVanC"
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.WatchPartyRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("WatchPartyRooms");
                });

            modelBuilder.Entity("MovieWebsite.Models.Comment", b =>
                {
                    b.HasOne("MovieWebsite.Models.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("MovieWebsite.Models.Episode", b =>
                {
                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("Episodes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.Movie", b =>
                {
                    b.HasOne("MovieWebsite.Models.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieWebsite.Models.MovieGenre", b =>
                {
                    b.HasOne("MovieWebsite.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.Rating", b =>
                {
                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.WatchPartyRoom", b =>
                {
                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MovieWebsite.Models.Country", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieWebsite.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieWebsite.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("MovieGenres");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
